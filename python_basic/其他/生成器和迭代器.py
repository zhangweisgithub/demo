# -*- coding: utf-8 -*-
# @Time    : 2018-05-17 14:42
# @Email   : Yzh_smlie@163.com
# @File    : 生成器和迭代器.py

'''
iterator 迭代器
generator 生成器
饭店一次性上齐所有的菜和饭店一道菜一道菜上的区别
生成器只能遍历一次


将列表生成式中[]改成() 之后数据结构是否改变？ 答案：是，从列表变为生成器

我们已经知道可以对list、tuple、str等类型的数据使用for...in...
的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫迭代
我们把可以通过for...in...这类语句迭代读取一条数据供我们使用的对象称之为可迭代对象（Iterable）

生成器算得上是Python语言中最吸引人的特性之一，生成器其实是一种特殊的迭代器，不过这种迭代器更加优雅。
它不需要再像上面的类一样写__iter__()和__next__()方法了，只需要一个yiled关键字。 
生成器一定是迭代器（反之不成立），因此任何生成器也是以一种懒加载的模式生成值

容器是一系列元素的集合，str、list、set、dict、file、sockets对象都可以看作是容器，容器都可以被迭代（用在for，while等语句中）
，因此他们被称为可迭代对象。可迭代对象实现了__iter__方法，该方法返回一个迭代器对象。
迭代器持有一个内部状态的字段，用于记录下次迭代返回值，它实现了__next__和__iter__方法，迭代器不会一次性把所有元素加载到内存，
而是需要的时候才生成返回结果。
生成器是一种特殊的迭代器，它的返回值不是通过return而是用yield。
生成器的返回值通过yield获取
迭代器的返回值通过return获取

Python有两种不同的方式提供生成器：

生成器函数：常规函数定义，但是，使用yield语句而不是return语句返回结果。yield语句一次返回一个结果，
    在每个结果中间，挂起函数的状态，以便下次重它离开的地方继续执行
生成器表达式：类似于列表推导，但是，生成器返回按需产生结果的一个对象，而不是一次构建一个结果列表
'''
# 生成器表达式

a = (x * x for x in range(10))
print(a)
