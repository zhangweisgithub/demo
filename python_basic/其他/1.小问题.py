# -*- coding: utf-8 -*-
# @Time    : 2018-05-10 16:04
# @Email   : Yzh_smlie@163.com
# @File    : 1-各种坑.py

"""
---不要使用可变对象作为函数默认值
---datetime也有布尔值
---'==' 和 is 的区别
1.input输入一个数字， 9。
如果想使用input()函数输入一个数值，在得到结果后需要用int()将字符串类型转换为数值类型。
2.列表中元素的删除
remove是删除首个符合条件的元素，而不是根据特定索引。
而对于 del 来说，它是根据索引（元素所在位置）来删除的，
pop是根据索引，返回的是索引指向那个数值。

----python2和python3的range（100）的区别
python2返回列表，python3返回迭代器，节约内存

----一句话解释什么样的语言能够用装饰器?
函数可以作为参数传递的语言，可以使用装饰器

----python内建数据类型有哪些
整型--int
布尔型--bool
字符串--str
列表--list
元组--tuple
字典--dict

----避免转义给字符串加哪个字母表示原始字符串？
r , 表示需要原始字符串，不转义特殊字符

----提高python运行效率的方法
1、使用生成器，因为可以节约大量内存
2、循环代码优化，避免过多重复代码的执行
3、核心模块用Cython  PyPy等，提高效率
4、多进程、多线程、协程
5、多个if elif条件判断，
    可以把最有可能先发生的条件放到前面写，这样可以减少程序判断的次数，提高效率


----简述多线程、多进程
进程：
1、操作系统进行资源分配和调度的基本单位，多个进程之间相互独立
2、稳定性好，如果一个进程崩溃，不影响其他进程，但是进程消耗资源大，开启的进程数量有限制

线程：
1、CPU进行资源分配和调度的基本单位，线程是进程的一部分，是比进程更小的能独立运行的基本单位，
一个进程下的多个线程可以共享该进程的所有资源
2、如果IO操作密集，则可以多线程运行效率高，缺点是如果一个线程崩溃，都会造成进程的崩溃

应用：
IO密集的用多线程，在用户输入，sleep 时候，可以切换到其他线程执行，减少等待的时间
CPU密集的用多进程，因为假如IO操作少，用多线程的话，因为线程共享一个全局解释器锁，当前运行的线程会霸占GIL，
其他线程没有GIL，就不能充分利用多核CPU的优势

----简述乐观锁和悲观锁
悲观锁, 就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。
传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。

乐观锁，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，
可以使用版本号等机制，乐观锁适用于多读的应用类型，这样可以提高吞吐量


二：字典的底层实现
    hash  哈希
    字典是无序的
三：进程间通信
    Queue
        put
        get
"""